#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi> // Requires auto-layer module.
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#include "zmk-helpers/helper.h"
#include "zmk-helpers/unicode-chars/greek.dtsi"
#include "zmk-helpers/key-labels/42.h"

#define DEF 0
#define CDH 1
#define NAV 2
#define FUN 3
#define NUM 4
#define SYS 5

#define QUICK_TAP_MS 175

&sk {
    release-after-ms = <900>;
    quick-release;
};

&sl {
    ignore-modifiers;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <175>;
};

/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS)                                 \
  ZMK_HOLD_TAP(NAME, bindings = <HOLD>, <TAP>; flavor = "balanced";            \
               tapping-term-ms = <280>; quick-tap-ms = <QUICK_TAP_MS>;         \
               require-prior-idle-ms = <150>; hold-trigger-on-release;         \
               hold-trigger-key-positions = <TRIGGER_POS>;)

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)                 // Left-hand HRMs.
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)                 // Right-hand HRMs.
MAKE_HRM(hmr_cmorph, &kp, &comma_morph, KEYS_L THUMBS) // comma_morph HRMs.
MAKE_HRM(hmr_dmorph, &kp, &dot_morph, KEYS_L THUMBS)   // dot_morph HRMs.
MAKE_HRM(hmr_emorph, &kp, &qexcl, KEYS_L THUMBS)       // qexcl HRMs.

// Hack: Make HRM combos tap-only (cf, ZMK issue #544).
#define ZMK_COMBO_8(NAME, TAP, POS, LAYERS, COMBO_MS, IDLE_MS, HOLD, SIDE)     \
  MAKE_HRM(hm_combo_##NAME, &kp, TAP, SIDE THUMBS)                             \
  ZMK_COMBO_6(NAME, &hm_combo_##NAME HOLD 0, POS, LAYERS, COMBO_MS, IDLE_MS)

/* Combos, leader key sequences, mouse emulation */

#include "combos.dtsi" // Must be sourced after HRM-combo hack.
#include "leader.dtsi"

/* Nav cluster */

// Trigger tap-action on all interrupts.
#define MT_CORE                                                                \
  flavor = "tap-preferred";                                                    \
  tapping-term-ms = <220>;                                                     \
  quick-tap-ms = <220>;                                                        \
  hold-trigger-key-positions = <0>;

&mt { MT_CORE };

#define NAV_LEFT  &kp HOME     LEFT  // Tap: left  | Long-tap: start of line.
#define NAV_RIGHT &kp END      RIGHT // Tap: right | Long-tap: end   of line.
#define NAV_UP    &mt LG(UP)   UP    // Tap: up    | Long-tap: start of doc.
#define NAV_DOWN  &mt LG(DOWN) DOWN  // Tap: down  | Long-tap: end   of doc.
#define NAV_BSPC  &mt LA(BSPC) BSPC  // Tap: bspc  | Long-tap: delete word bwd.
#define NAV_DEL   &mt LA(DEL)  DEL   // Tap: del   | Long-tap: delete word fwd.

/* Magic-shift & auto-layers */

// Tap: repeat after alpha, else sticky-shift |
// Shift + tap/ double-tap: caps-word | Hold: shift.
#define MAGIC_SHIFT &magic_shift LSHFT 0
ZMK_HOLD_TAP(magic_shift, bindings = <&kp>, <&magic_shift_tap>;
             flavor = "balanced"; tapping-term-ms = <200>;
             quick-tap-ms = <QUICK_TAP_MS>;)
ZMK_MOD_MORPH(magic_shift_tap, bindings = <&shift_repeat>, <&caps_word>;
              mods = <(MOD_LSFT)>;)
ZMK_ADAPTIVE_KEY(
    shift_repeat, bindings = <&sk LSHFT>;
    repeat {
      trigger-keys = <A B C D E F G H I J K L M N O P Q R S T U V W X Y Z>;
      bindings = <&key_repeat>;
      max-prior-idle-ms = <1200>;
      strict-modifiers;
    };)
&caps_word { // Mods deactivate caps-word, requires PR #1451. [TODO: rebase]
  /delete-property/ ignore-modifiers;
};

// Tap: sticky num-layer | double-tap: num-word | Hold: num-layer.
#define SMART_NUM &smart_num NUM 0
ZMK_HOLD_TAP(smart_num, bindings = <&mo>, <&num_dance>; flavor = "balanced";
             tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;)
ZMK_TAP_DANCE(num_dance, bindings = <&sl NUM>, <&num_word NUM>;
              tapping-term-ms = <200>;)

/* Custom behaviors */

// Define mod-morph with a *single* mod trigger for less repetition.
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2)                            \
  ZMK_MOD_MORPH(NAME, mods = <(MOD_L##MOD | MOD_R##MOD)>;                      \
                bindings = <BINDING1>, <BINDING2>;)

// Tap: comma | Shift + tap: semicolon | Ctrl + shift + tap: <.
SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &comma_inner_morph)
SIMPLE_MORPH(comma_inner_morph, GUI, &kp SEMICOLON, &kp LESS_THAN)

// Tap: dot | Shift + tap: colon | Ctrl + shift + tap: >.
SIMPLE_MORPH(dot_morph, SFT, &kp DOT, &dot_inner_morph)
SIMPLE_MORPH(dot_inner_morph, GUI, &kp COLON, &kp GREATER_THAN)

// Tap: excl | Shift + tap: qmark.
SIMPLE_MORPH(qexcl, SFT, &kp EXCL, &kp QMARK)

// Tap: left/right parenthesis | Shft + tap: less-than/greater-than.
SIMPLE_MORPH(lpar_lt, SFT, &kp LPAR, &kp LT)
SIMPLE_MORPH(rpar_gt, SFT, &kp RPAR, &kp GT)

// Tap: space | Shift + tap: dot -> space -> sticky shift | Hold: nav layer.
ZMK_HOLD_TAP(lt_spc, bindings = <&mo>, <&spc_morph>; flavor = "balanced";
             tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;)
SIMPLE_MORPH(spc_morph, SFT, &kp SPACE, &dot_spc)
ZMK_MACRO(dot_spc, bindings = <&kp DOT &kp SPACE &sk LSHFT>; wait-ms = <0>;
          tap-ms = <5>;)

// Tap: backspace | Lshft + tap: delete | Rshft + tap: shift-delete.
ZMK_MOD_MORPH(bs_del, bindings = <&kp BSPC>, <&kp DEL>;
              mods = <(MOD_LSFT|MOD_RSFT)>; keep-mods = <MOD_RSFT>;)

// Tap: copy | double-tap: cut.
ZMK_TAP_DANCE(copy_cut, bindings = <&kp LG(C)>, <&kp LG(X)>;
              tapping-term-ms = <200>;)

// Sticky shift + leader.
ZMK_MACRO(leader_sft, bindings = <&sk LSHFT &leader>;)

// Misc aliases. [TODO: clean up]
#define DSK_PREV  &kp LC(LEFT)         // Previous desktop.
#define DSK_NEXT  &kp LC(RIGHT)        // Next     desktop.
#define TERMINAL  &hmr LSHFT LC(GRAVE) // Terminal.


    /* Keymap */

ZMK_CONDITIONAL_LAYER(sys, FUN NUM, SYS) // FUN + NUM --> SYS.

keymap {
    compatible = "zmk,keymap";

    def {
        bindings = <
&kp TAB  &kp Q        &kp W         &kp E        &kp R          &kp T            &kp Y         &kp U         &kp I               &kp O                &kp P               &kp BACKSPACE
&kp ESC  &kp A        &kp S         &kp D        &kp F          &kp G            &kp H         &kp J         &kp K               &kp L                &kp SQT             &kp SEMICOLON
&trans   &hml LALT Z  &hml LCTRL X  &hml LGUI C  &hml LSHFT V   &kp B            &kp N         &hmr RSHFT M  &hmr_cmorph LGUI 0  &hmr_dmorph LCTRL 0  &hmr_emorph LALT 0  &trans       
                                    &trans       &lt FUN ENTER  &lt_spc NAV 0    MAGIC_SHIFT   SMART_NUM     &trans
        >;

        label = "Qwerty";
    };

    cdh {
        bindings = <
&kp TAB  &kp Q        &kp W         &kp F        &kp P          &kp B            &kp J        &kp L         &kp U               &kp Y                &kp SQT             &kp BACKSPACE
&kp ESC  &kp A        &kp R         &kp S        &kp T          &kp G            &kp M        &kp N         &kp E               &kp I                &kp O               &kp SEMICOLON
&trans   &hml LALT Z  &hml LCTRL X  &hml LGUI C  &hml LSHFT D   &kp V            &kp K        &hmr RSHFT H  &hmr_cmorph LGUI 0  &hmr_dmorph LCTRL 0  &hmr_emorph LALT 0  &trans       
                                    &trans       &lt FUN ENTER  &lt NAV SPACE    MAGIC_SHIFT  SMART_NUM     &trans
        >;

        label = "Colemak";
    };

    nav {
        bindings = <
&trans  &trans    &trans     &trans    &kp LG(TAB)  &trans    &kp PG_UP     NAV_BSPC  NAV_UP    NAV_DEL    &trans   &trans
&trans  &trans    &trans     &trans    &trans       &trans    &kp PG_DN     NAV_LEFT  NAV_DOWN  NAV_RIGHT  &kp RET  &trans
&trans  &sk LALT  &sk LCTRL  &sk LGUI  &sk LSHFT    &trans    &kp INS       &kp TAB   &trans    &trans     &trans   &trans
                             &trans    &trans       &trans    &kp K_CANCEL  &trans    &trans
        >;

        label = "Magic";
    };

    fun {
        bindings = <
&trans  &kp F12        &kp F7        &kp F8        &kp F9         &trans    &trans    &kp C_PREV  &kp C_VOL_UP  &kp C_NEXT  &trans  &trans
&trans  &kp F11        &kp F4        &kp F5        &kp F6         &trans    &trans    DSK_PREV    &kp C_VOL_DN  DSK_NEXT    &trans  &trans
&trans  &hml LALT F10  &hml LCTL F1  &hml LGUI F2  &hml LSHFT F3  &trans    &trans    TERMINAL    &trans        &trans      &trans  &trans
                                     &trans        &trans         &trans    &kp C_PP  &kp C_MUTE  &trans
        >;

        label = "Function";
    };

    num {
        bindings = <
&trans  &trans    &kp N7         &kp N8        &kp N9         &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp N0    &kp N4         &kp N5        &kp N6         &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LALT  &hml LCTRL N1  &hml LGUI N2  &hml LSHFT N3  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                 &trans        &trans         &trans    &trans  &trans  &trans
        >;

        label = "Number";
    };

    sys {
        bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans       &to DEF  &to CDH  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &bootloader     &bootloader  &trans   &trans   &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &sys_reset      &sys_reset   &trans   &trans   &trans  &trans  &trans
                                        &trans        &trans        &trans          &trans       &trans   &trans
        >;

        label = "System";
    };
};