#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi> // Requires auto-layer module.

#include <dt-bindings/zmk/keys.h>;
#include <dt-bindings/zmk/bt.h>;
#include <dt-bindings/zmk/outputs.h>;

#include "key-labels.h"

#define DEF 0
#define CDH 1
#define NAV 2
#define FUN 3
#define NUM 4
#define SYS 5

#define TAPPING_TERM_MS 280
#define QUICK_TAP_MS    175

#define COMBO_TERM_FAST 18
#define COMBO_TERM_SLOW 30

#define COMBO_IDLE_FAST 150
#define COMBO_IDLE_SLOW 50

&sk {
    release-after-ms = <900>;
    quick-release;
};

&sl {
    ignore-modifiers;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

// Trigger tap-action on all interrupts.
&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <220>;
    quick-tap-ms = <220>;
    hold-trigger-key-positions = <0>;
};

&caps_word {
    /delete-property/ ignore-modifiers;
};

/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2

// #include "greek.dtsi"
// #include "leader.dtsi"

/* Nav cluster */

#define NAV_LEFT  &kp HOME     LEFT  // Tap: left  | Long-tap: start of line.
#define NAV_RIGHT &kp END      RIGHT // Tap: right | Long-tap: end   of line.
#define NAV_UP    &mt LG(UP)   UP    // Tap: up    | Long-tap: start of doc.
#define NAV_DOWN  &mt LG(DOWN) DOWN  // Tap: down  | Long-tap: end   of doc.
#define NAV_BSPC  &mt LA(BSPC) BSPC  // Tap: bspc  | Long-tap: delete word bwd.
#define NAV_DEL   &mt LA(DEL)  DEL   // Tap: del   | Long-tap: delete word fwd.

#define MAGIC_SHIFT &magic_shift LSHFT 0
#define SMART_NUM &smart_num NUM 0

// Misc aliases.
#define DSK_PREV  &kp LC(LEFT)         // Previous desktop.
#define DSK_NEXT  &kp LC(RIGHT)        // Next     desktop.
#define TERMINAL  &hmr LSHFT LC(GRAVE) // Terminal.

/* Keymap */

/ {
    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <TAPPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <TAPPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };

        hmr_cmorph: hmr_cmorph {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_CMORPH";
            bindings = <&kp>, <&comma_morph>;

            #binding-cells = <2>;
            tapping-term-ms = <TAPPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };

        hmr_dmorph: hmr_dmorph {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_DMORPH";
            bindings = <&kp>, <&dot_morph>;

            #binding-cells = <2>;
            tapping-term-ms = <TAPPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };

        hmr_emorph: hmr_emorph {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_EMORPH";
            bindings = <&kp>, <&qexcl>;

            #binding-cells = <2>;
            tapping-term-ms = <TAPPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };

        // Tap: space | Shift + tap: dot -> space -> sticky shift | Hold: nav layer.
        lt_spc: ltspc {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&mo>, <&spc_morph>;
            flavor = "balanced";
            tapping-term-ms = <TAPPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
        };
        spc_morph: spc_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp SPACE>, <&dot_spc>;
        };
        dot_spc: dot_spc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE &sk LSHFT>;
            wait-ms = <0>;
            tap-ms = <5>;
        };

        // Tap: repeat after alpha, else sticky-shift |
        // Shift + tap/ double-tap: caps-word | Hold: shift.
        magic_shift: magic_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&magic_shift_tap>;
            flavor = "balanced";
            tapping-term-ms = <TAPPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
        };
        magic_shift_tap: magic_shift_tap {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&shift_repeat>, <&caps_word>;
            mods = <(MOD_LSFT)>;
        };
        shift_repeat: shift_repeat {
            compatible = "zmk,behavior-adaptive-key";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>;
            repeat {
                trigger-keys = <A B C D E F G H I J K L M N O P Q R S T U V W X Y Z>;
                bindings = <&key_repeat>;
                max-prior-idle-ms = <1200>;
                strict-modifiers;
            };
        };

        // Tap: sticky num-layer | double-tap: num-word | Hold: num-layer.
        smart_num: smart_num {
            compatible = "zmk,behavior-hold-tap";#binding-cells = <2>;
            bindings = <&mo>, <&num_dance>;
            flavor = "balanced";
            tapping-term-ms = <TAPPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
        };
        num_dance: num_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&sl NUM>, <&num_word NUM>;
            tapping-term-ms = <TAPPING_TERM_MS>;
        };

        // Tap: backspace | Lshft + tap: delete | Rshft + tap: shift-delete.
        bs_del: bs_del {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        // Tap: copy | double-tap: cut.
        copy_cut: copy_cut {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp LG(C)>, <&kp LG(X)>;
            tapping-term-ms = <TAPPING_TERM_MS>;
        };

        // Sticky shift + leader.
        /* leader_sft: leader_sft {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LSHFT &leader>;
        }; */

        // Tap: comma | Shift + tap: semicolon | Ctrl + shift + tap: <.
        comma_morph: comma_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp COMMA>, <&comma_inner_morph>;
        };
        comma_inner_morph: comma_inner_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
            bindings = <&kp SEMICOLON>, <&kp LESS_THAN>;
        };

        // Tap: dot | Shift + tap: colon | Ctrl + shift + tap: >.
        dot_morph: dot_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp DOT>, <&dot_inner_morph>;
        };
        dot_inner_morph: dot_inner_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
            bindings = <&kp COLON>, <&kp GREATER_THAN>;
        };

        // Tap: excl | Shift + tap: qmark.
        qexcl: qexcl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp EXCL>, <&kp QMARK>;
        };

        // Tap: left/right parenthesis | Shft + tap: less-than/greater-than.
        lpar_lt: lpar_lt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp LPAR>, <&kp LT>;
        };
        rpar_gt: rpar_gt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp RPAR>, <&kp GT>;
        };
    };

    combos {
        compatible = "zmk,combos";

        /* Horizontal combos - left hand */
        combo_esc {
            bindings = <&kp ESC>;
            key-positions = <LT3 LT2>;
            layers = <DEF CDH NAV NUM>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };
        combo_ent {
            bindings = <&kp ENTER>;
            key-positions = <LT2 LT1>;
            layers = <DEF CDH NAV NUM>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <LM3 LM2>;
            layers = <DEF CDH NAV NUM>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };
        /* combo_ldr {
            bindings = <&leader>;
            key-positions = <LM2 LM1>;
            layers = <DEF CDH NAV NUM>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };
        combo_ldrsh {
            bindings = <&leader_sft>;
            key-positions = <LM2 LM1>;
            layers = <DEF CDH NAV NUM>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        }; */

        combo_cut {
            bindings = <&hml LS(LCTRL) LG(X)>;
            key-positions = <LB3 LB1>;
            layers = <DEF CDH NAV NUM>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };
        combo_copy {
            bindings = <&hml LG(LCTRL) LG(C)>;
            key-positions = <LB3 LB2>;
            layers = <DEF CDH NAV NUM>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };
        combo_paste {
            bindings = <&hml LS(LGUI) LG(V)>;
            key-positions = <LB2 LB1>;
            layers = <DEF CDH NAV NUM>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        /* Horizontal combos - right hand */
        combo_bspc {
            bindings = <&kp BSPC>;
            key-positions = <RT1 RT2>;
            layers = <DEF CDH NAV NUM>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };
        combo_del {
            bindings = <&kp DEL>;
            key-positions = <RT2 RT3>;
            layers = <DEF CDH NAV NUM>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_lpar {
            bindings = <&lpar_lt>;
            key-positions = <RM1 RM2>;
            layers = <DEF CDH NUM>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };
        combo_rpar {
            bindings = <&rpar_gt>;
            key-positions = <RM2 RM3>;
            layers = <DEF CDH NUM>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };
        combo_lt {
            bindings = <&kp LT>;
            key-positions = <RM1 RM2>;
            layers = <NAV>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };
        combo_gt {
            bindings = <&kp GT>;
            key-positions = <RM2 RM3>;
            layers = <NAV>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_lbkt {
            bindings = <&hmr LS(LGUI) LBKT>;
            key-positions = <RB1 RB2>;
            layers = <DEF CDH NUM>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };
        combo_rbkt {
            bindings = <&hmr LG(LCTRL) RBKT>;
            key-positions = <RB2 RB3>;
            layers = <DEF CDH NUM>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };
        combo_lbrc {
            bindings = <&kp LBRC>;
            key-positions = <RB1 RB2>;
            layers = <NAV>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };
        combo_rbrc {
            bindings = <&kp RBRC>;
            key-positions = <RB2 RB3>;
            layers = <NAV>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        /* Vertical combos - left hand */
        combo_at {
            bindings = <&kp AT>;
            key-positions = <LT3 LM3>;
            layers = <DEF CDH NAV NUM>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        combo_hash {
            bindings = <&kp HASH>;
            key-positions = <LT2 LM2>;
            layers = <DEF CDH NAV NUM>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        combo_dllr {
            bindings = <&kp DLLR>;
            key-positions = <LT1 LM1>;
            layers = <DEF CDH NAV NUM>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        combo_prcnt {
            bindings = <&kp PRCNT>;
            key-positions = <LT0 LM0>;
            layers = <DEF CDH NAV NUM>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        combo_grave {
            bindings = <&kp GRAVE>;
            key-positions = <LM3 LB3>;
            layers = <DEF CDH NAV NUM>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        combo_bslh {
            bindings = <&kp BSLH>;
            key-positions = <LM2 LB2>;
            layers = <DEF CDH NAV NUM>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        combo_equal {
            bindings = <&kp EQUAL>;
            key-positions = <LM1 LB1>;
            layers = <DEF CDH NAV NUM>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        combo_tilde {
            bindings = <&kp TILDE>;
            key-positions = <LM0 LB0>;
            layers = <DEF CDH NAV NUM>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        /* Vertical combos - right hand */
        combo_caret {
            bindings = <&kp CARET>;
            key-positions = <RT0 RM0>;
            layers = <DEF CDH NAV NUM>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        combo_plus {
            bindings = <&kp PLUS>;
            key-positions = <RT1 RM1>;
            layers = <DEF CDH NAV NUM>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        combo_star {
            bindings = <&kp STAR>;
            key-positions = <RT2 RM2>;
            layers = <DEF CDH NAV NUM>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        combo_amps {
            bindings = <&kp AMPS>;
            key-positions = <RT3 RM3>;
            layers = <DEF CDH NAV NUM>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        combo_under {
            bindings = <&kp UNDER>;
            key-positions = <RM0 RB0>;
            layers = <DEF CDH NAV NUM>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <RM1 RB1>;
            layers = <DEF CDH NAV NUM>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        combo_fslh {
            bindings = <&kp FSLH>;
            key-positions = <RM2 RB2>;
            layers = <DEF CDH NAV NUM>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        combo_pipe {
            bindings = <&kp PIPE>;
            key-positions = <RM3 RB3>;
            layers = <DEF CDH NAV NUM>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer_sys {
            if-layers = <FUN NUM>;
            then-layer = <SYS>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        def {
            bindings = <
    &kp TAB  &kp Q        &kp W         &kp E        &kp R          &kp T            &kp Y         &kp U         &kp I               &kp O                &kp P               &kp BACKSPACE
    &kp ESC  &kp A        &kp S         &kp D        &kp F          &kp G            &kp H         &kp J         &kp K               &kp L                &kp SQT             &kp SEMICOLON
    &trans   &hml LALT Z  &hml LCTRL X  &hml LGUI C  &hml LSHFT V   &kp B            &kp N         &hmr RSHFT M  &hmr_cmorph LGUI 0  &hmr_dmorph LCTRL 0  &hmr_emorph LALT 0  &trans       
                                        &trans       &lt FUN ENTER  &lt_spc NAV 0    MAGIC_SHIFT   SMART_NUM     &trans
            >;

            label = "Qwerty";
        };

        cdh {
            bindings = <
    &kp TAB  &kp Q        &kp W         &kp F        &kp P          &kp B            &kp J        &kp L         &kp U               &kp Y                &kp SQT             &kp BACKSPACE
    &kp ESC  &kp A        &kp R         &kp S        &kp T          &kp G            &kp M        &kp N         &kp E               &kp I                &kp O               &kp SEMICOLON
    &trans   &hml LALT Z  &hml LCTRL X  &hml LGUI C  &hml LSHFT D   &kp V            &kp K        &hmr RSHFT H  &hmr_cmorph LGUI 0  &hmr_dmorph LCTRL 0  &hmr_emorph LALT 0  &trans       
                                        &trans       &lt FUN ENTER  &lt NAV SPACE    MAGIC_SHIFT  SMART_NUM     &trans
            >;

            label = "Colemak";
        };

        nav {
            bindings = <
    &trans  &trans    &trans     &trans    &kp LG(TAB)  &trans    &kp PG_UP     NAV_BSPC  NAV_UP    NAV_DEL    &trans   &trans
    &trans  &trans    &trans     &trans    &trans       &trans    &kp PG_DN     NAV_LEFT  NAV_DOWN  NAV_RIGHT  &kp RET  &trans
    &trans  &sk LALT  &sk LCTRL  &sk LGUI  &sk LSHFT    &trans    &kp INS       &kp TAB   &trans    &trans     &trans   &trans
                                &trans    &trans       &trans    &kp K_CANCEL  &trans    &trans
            >;

            label = "Magic";
        };

        fun {
            bindings = <
    &trans  &kp F12        &kp F7        &kp F8        &kp F9         &trans    &trans    &kp C_PREV  &kp C_VOL_UP  &kp C_NEXT  &trans  &trans
    &trans  &kp F11        &kp F4        &kp F5        &kp F6         &trans    &trans    DSK_PREV    &kp C_VOL_DN  DSK_NEXT    &trans  &trans
    &trans  &hml LALT F10  &hml LCTL F1  &hml LGUI F2  &hml LSHFT F3  &trans    &trans    TERMINAL    &trans        &trans      &trans  &trans
                                        &trans        &trans         &trans    &kp C_PP  &kp C_MUTE  &trans
            >;

            label = "Function";
        };

        num {
            bindings = <
    &trans  &trans    &kp N7         &kp N8        &kp N9         &trans    &trans  &trans  &trans  &trans  &trans  &trans
    &trans  &kp N0    &kp N4         &kp N5        &kp N6         &trans    &trans  &trans  &trans  &trans  &trans  &trans
    &trans  &kp LALT  &hml LCTRL N1  &hml LGUI N2  &hml LSHFT N3  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                    &trans        &trans         &trans    &trans  &trans  &trans
            >;

            label = "Number";
        };

        sys {
            bindings = <
    &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans       &to DEF  &to CDH  &trans  &trans  &trans
    &trans      &trans        &trans        &trans        &trans        &bootloader     &bootloader  &trans   &trans   &trans  &trans  &trans
    &trans      &trans        &trans        &trans        &trans        &sys_reset      &sys_reset   &trans   &trans   &trans  &trans  &trans
                                            &trans        &trans        &trans          &trans       &trans   &trans
            >;

            label = "System";
        };
    };
};