/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define _BT_SEL_KEYS_ &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4

#define DEF 0
#define NAV 1
#define FUN 2
#define NUM 3
#define SYM 4
#define MED 5
#define SYS 6

#define ___    &trans
#define xxx    &none
#define CANCEL &kp K_CANCEL

#define TAPPING_TERM 200
#define QUICK_TAP    175
#define G_QUICK_TAP  150

#define COMBO_TERM_FAST 18
#define COMBO_TERM_SLOW 30
#define COMBO_IDLE_FAST 150
#define COMBO_IDLE_SLOW 50


&sk {
    release-after-ms = <900>;
    quick-release;
};

&sl {
    ignore-modifiers;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM>;
    quick-tap-ms = <0>;
};

#define KEYS_L 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29    // left hand
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35  // right hand
#define THUMBS 36 37 38 39 40 41                                  // thumbs

#define HRC_TAB    &hml         LG(LCTRL) TAB
#define HRC_REPEAT &hml_repeat  LS(LGUI) 0
#define HRC_LPAR   &hmr_lpar_lt RS(LGUI) 0
#define HRC_RPAR   &hmr_rpar_gt LG(LCTRL) 0

/ {
    behaviors {
        hml: homerow_mod_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MOD_LEFT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <TAPPING_TERM>;
            quick-tap-ms = <QUICK_TAP>;
            require-prior-idle-ms = <G_QUICK_TAP>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };
        hmr: homerow_mod_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MOD_RIGHT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <TAPPING_TERM>;
            quick-tap-ms = <QUICK_TAP>;
            require-prior-idle-ms = <G_QUICK_TAP>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };
        hml_repeat: homerow_mod_repeat {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MOD_REPEAT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <TAPPING_TERM>;
            quick-tap-ms = <QUICK_TAP>;
            require-prior-idle-ms = <G_QUICK_TAP>;
            bindings = <&kp>, <&key_repeat>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };
        hmr_lpar_lt: homerow_mod_lpar {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MOD_LPAR";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <TAPPING_TERM>;
            quick-tap-ms = <QUICK_TAP>;
            require-prior-idle-ms = <G_QUICK_TAP>;
            bindings = <&kp>, <&lpar_lt>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };
        hmr_rpar_gt: homerow_mod_rpar {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MOD_RPAR";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <TAPPING_TERM>;
            quick-tap-ms = <QUICK_TAP>;
            require-prior-idle-ms = <G_QUICK_TAP>;
            bindings = <&kp>, <&rpar_gt>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };
        smart_shft: SMART_SHIFT {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHIFT";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;
            mods = <(MOD_LSFT)>;
        };
        // tap: left-parenthesis | shft + tap: less-than
        lpar_lt: LPAR_LT {
            compatible = "zmk,behavior-mod-morph";
            label = "LPAR_LT";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp LT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        // tap: right-parenthesis | shft + tap: greater-than
        rpar_gt: RPAR_LT {
            compatible = "zmk,behavior-mod-morph";
            label = "RPAR_LT";
            #binding-cells = <0>;
            bindings = <&kp RPAR>, <&kp GT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        // tap: comma | shift + tap: semicolon | ctrl + shift + tap: <
        comma_morph: COMMA_MORPH {
            compatible = "zmk,behavior-mod-morph";
            label = "comma_morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&comma_inner_morph>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        comma_inner_morph: COMMA_INNER_MORPH {
            compatible = "zmk,behavior-mod-morph";
            label = "comma_inner_morph";
            #binding-cells = <0>;
            bindings = <&kp SEMICOLON>, <&kp LESS_THAN>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };
        // tap: dot | shift + tap: colon | ctrl + shift + tap: >
        dot_morph: dot_MORPH {
            compatible = "zmk,behavior-mod-morph";
            label = "dot_morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&dot_inner_morph>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        dot_inner_morph: dot_INNER_MORPH {
            compatible = "zmk,behavior-mod-morph";
            label = "dot_inner_morph";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp GREATER_THAN>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };
    };

    combos {
        compatible = "zmk,combos";
        /* combo_esc {
            timeout-ms = <COMBO_TERM_FAST>;
            bindings = <&kp ESC>;
            key-positions = <2 3>;
            layers = <DEF>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        }; */   
        combo_ret {
            timeout-ms = <10>;
            bindings = <&kp RET>;
            key-positions = <3 4>;
            layers = <DEF>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };
        combo_tab {
            timeout-ms = <COMBO_TERM_FAST>;
            bindings = <HRC_TAB>;
            key-positions = <14 15>;
            layers = <DEF>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };
        combo_repeat {
            timeout-ms = <COMBO_TERM_FAST>;
            bindings = <HRC_REPEAT>;
            key-positions = <15 16>;
            layers = <DEF>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };
        combo_lpar {
            timeout-ms = <COMBO_TERM_FAST>;
            bindings = <HRC_LPAR>;
            key-positions = <19 20>;
            layers = <DEF>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };
        combo_rpar {
            timeout-ms = <COMBO_TERM_FAST>;
            bindings = <HRC_RPAR>;
            key-positions = <20 21>;
            layers = <DEF>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };
        combo_lbkt {
            timeout-ms = <COMBO_TERM_FAST>;
            bindings = <&kp LBKT>;
            key-positions = <31 32>;
            layers = <DEF>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };
        combo_rbkt {
            timeout-ms = <COMBO_TERM_FAST>;
            bindings = <&kp RBKT>;
            key-positions = <32 33>;
            layers = <DEF>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };
        combo_copy {
            timeout-ms = <COMBO_TERM_FAST>;
            bindings = <&kp LG(C)>;
            key-positions = <26 27>;
            layers = <DEF>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };
        combo_cut {
            timeout-ms = <COMBO_TERM_FAST>;
            bindings = <&kp LG(X)>;
            key-positions = <26 28>;
            layers = <DEF>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };
        combo_paste {
            timeout-ms = <COMBO_TERM_FAST>;
            bindings = <&kp LG(V)>;
            key-positions = <27 28>;
            layers = <DEF>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };
        combo_bspc {
            timeout-ms = <COMBO_TERM_FAST>;
            bindings = <&kp BSPC>;
            key-positions = <7 8>;
            layers = <DEF>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };
        combo_del {
            timeout-ms = <COMBO_TERM_FAST>;
            bindings = <&kp DEL>;
            key-positions = <8 9>;
            layers = <DEF>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        combo_at {
            timeout-ms = <COMBO_TERM_SLOW>;
            bindings = <&kp AT>;
            key-positions = <3 15>;
            layers = <DEF>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        combo_hash {
            timeout-ms = <COMBO_TERM_SLOW>;
            bindings = <&kp HASH>;
            key-positions = <4 16>;
            layers = <DEF>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        combo_dllr {
            timeout-ms = <COMBO_TERM_SLOW>;
            bindings = <&kp DLLR>;
            key-positions = <5 17>;
            layers = <DEF>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        combo_prcnt {
            timeout-ms = <COMBO_TERM_SLOW>;
            bindings = <&kp PRCNT>;
            key-positions = <6 18>;
            layers = <DEF>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        combo_caret {
            timeout-ms = <COMBO_TERM_SLOW>;
            bindings = <&kp CARET>;
            key-positions = <7 19>;
            layers = <DEF>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        combo_plus {
            timeout-ms = <COMBO_TERM_SLOW>;
            bindings = <&kp PLUS>;
            key-positions = <8 20>;
            layers = <DEF>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        combo_star {
            timeout-ms = <COMBO_TERM_SLOW>;
            bindings = <&kp STAR>;
            key-positions = <9 21>;
            layers = <DEF>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        combo_amps {
            timeout-ms = <COMBO_TERM_SLOW>;
            bindings = <&kp AMPS>;
            key-positions = <10 22>;
            layers = <DEF>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        combo_grave {
            timeout-ms = <COMBO_TERM_SLOW>;
            bindings = <&kp GRAVE>;
            key-positions = <15 27>;
            layers = <DEF>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        combo_bslh {
            timeout-ms = <COMBO_TERM_SLOW>;
            bindings = <&kp BSLH>;
            key-positions = <16 28>;
            layers = <DEF>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        combo_equal {
            timeout-ms = <COMBO_TERM_SLOW>;
            bindings = <&kp EQUAL>;
            key-positions = <17 29>;
            layers = <DEF>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        combo_tilde {
            timeout-ms = <COMBO_TERM_SLOW>;
            bindings = <&kp TILDE>;
            key-positions = <18 30>;
            layers = <DEF>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        combo_under {
            timeout-ms = <COMBO_TERM_SLOW>;
            bindings = <&kp UNDER>;
            key-positions = <19 31>;
            layers = <DEF>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        combo_dash {
            timeout-ms = <COMBO_TERM_SLOW>;
            bindings = <&kp MINUS>;
            key-positions = <20 32>;
            layers = <DEF>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        combo_fslh {
            timeout-ms = <COMBO_TERM_SLOW>;
            bindings = <&kp FSLH>;
            key-positions = <21 33>;
            layers = <DEF>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        combo_pipe {
            timeout-ms = <COMBO_TERM_SLOW>;
            bindings = <&kp PIPE>;
            key-positions = <22 34>;
            layers = <DEF>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <MED SYM>;
            then-layer = <SYS>;
        };
        tri_layer_left {
            if-layers = <MED FUN>;
            then-layer = <SYS>;
        };
        tri_layer_right {
            if-layers = <NUM SYM>;
            then-layer = <SYS>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
   &kp GRAVE &kp Q       &kp W        &kp E       &kp R         &kp T       /*|*/ &kp Y        &kp U        &kp I        &kp O        &kp P         &kp EQUAL
   &kp ESC   &hml LALT A &hml LCTRL S &hml LGUI D &hml LSHFT F  &kp G       /*|*/ &kp H        &hmr RSHFT J &hmr LGUI K  &hmr LCTRL L &hmr LALT SQT &kp MINUS
   &kp EXCL  &kp Z       &kp X        &kp C       &kp V         &kp B       /*|*/ &kp N        &kp M        &comma_morph &dot_morph   &kp FSLH      &kp QMARK
                                     &lt MED TAB &lt FUN RET &lt NAV SPACE     /*|*/ &smart_shft  &lt NUM BSPC &lt SYM DEL
            >;
        };

        nav_layer {
            bindings = <
   ___ ___       ___       ___        &kp LG(TAB) ___ /*|*/ &kp LG(Z) &kp LG(V) &kp LG(C) &kp LG(X) &kp LG(LS(Z)) ___ 
   ___ &sk LALT  &sk LCTRL &sk LGUI   &sk LSHFT   ___ /*|*/ &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT &kp RET       ___
   ___ &kp LG(Z) &kp LG(X) &kp LG(C)  &kp LG(V)   ___ /*|*/ &kp HOME  &kp PG_DN &kp PG_UP &kp END   &kp INS       ___
                           ___        ___         ___ /*|*/ CANCEL    &kp BSPC  &kp DEL
            >;
        };

        fun_layer {
            bindings = <
   ___ &kp F12 &kp F7 &kp F8  &kp F9    &kp PSCRN       /*|*/ ___          ___          ___        ___           ___ ___
   ___ &kp F11 &kp F4 &kp F5  &kp F6    &kp SLCK        /*|*/ &kp LC(LEFT) &kp LC(DOWN) &kp LC(UP) &kp LC(RIGHT) ___ ___
   ___ &kp F10 &kp F1 &kp F2  &kp F3    &kp PAUSE_BREAK /*|*/ ___          ___          ___        ___           ___ ___
                      ___     ___       ___             /*|*/ ___          ___          ___
            >;
        };

        num_layer {
            bindings = <
   ___ &kp LBKT       &kp N7        &kp N8       &kp N9        &kp RBKT  /*|*/ ___ ___       ___      ___       ___      ___
   ___ &hml LALT SEMI &hml LCTRL N4 &hml LGUI N5 &hml RSHFT N6 &kp EQUAL /*|*/ ___ &sk RSHFT &sk LGUI &sk LCTRL &sk LALT ___
   ___ &kp GRAVE      &kp N1        &kp N2       &kp N3        &kp BSLH  /*|*/ ___ ___       ___      ___       ___      ___
                                    &kp DOT      &kp N0        &kp MINUS /*|*/ ___ ___       ___
            >;
        };

        sym_layer {
            bindings = <
   ___ &kp LBRC        &kp AMPS        &kp STAR        &kp LPAR         &kp RBRC  /*|*/ ___ ___       ___      ___       ___      ___
   ___ &hml LALT COLON &hml LCTRL DLLR &hml LGUI PRCNT &hml RSHFT CARET &kp PLUS  /*|*/ ___ &sk RSHFT &sk LGUI &sk LCTRL &sk LALT ___
   ___ &kp TILDE       &kp EXCL        &kp AT          &kp HASH         &kp PIPE  /*|*/ ___ ___       ___      ___       ___      ___
                                       ___             &kp RPAR         &kp UNDER /*|*/ ___ ___       ___
            >;
        };

        med_layer {
            bindings = <
   ___ ___ ___ ___ ___ ___ /*|*/ ___        ___          ___          ___        ___ ___
   ___ ___ ___ ___ ___ ___ /*|*/ &kp C_PREV &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT ___ ___
   ___ ___ ___ ___ ___ ___ /*|*/ ___        ___          ___          ___        ___ ___
               ___ ___ ___ /*|*/ &kp C_PP &kp C_MUTE     ___
            >;
        };

        sys_layer {
            bindings = <
            _BT_SEL_KEYS_          /*|*/ ___         ___    ___    ___    ___    ___   
   ___ ___ ___ ___ ___ &bootloader /*|*/ &bootloader ___    ___    ___    ___    ___   
   ___ ___ ___ ___ ___ &sys_reset  /*|*/ &sys_reset  ___    ___    ___    ___    ___    
               ___ ___ ___         /*|*/ ___         ___    ___    
            >;
        };
    };
};