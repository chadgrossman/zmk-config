#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&sk { quick-release; };

/ {
    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 36 38 37>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <36 38 37 39 40 41 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };

        hmr_lpar_lt: hmr_lpar_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_LPAR_LT";
            bindings = <&kp>, <&lpar_lt>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
            hold-trigger-on-release;
        };

        hmr_rpar_gt: hmr_rpar_gt {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_RPAR_GT";
            bindings = <&kp>, <&rpar_gt>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
            hold-trigger-on-release;
        };

        hml_repeat: hml_repeat {
            compatible = "zmk,behavior-hold-tap";
            label = "HML_REPEAT";
            bindings = <&kp>, <&key_repeat>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 38 37 36>;
        };

        smart_shift: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHIFT";
            bindings = <&sk LEFT_SHIFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        smart_num: smart_num {
            compatible = "zmk,behavior-hold-tap";
            label = "SMART_NUM";
            bindings = <&mo>, <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
        };

        lpar_lt: lpar_lt {
            compatible = "zmk,behavior-mod-morph";
            label = "LPAR_LT";
            bindings = <&kp LPAR>, <&kp LT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rpar_gt: rpar_gt {
            compatible = "zmk,behavior-mod-morph";
            label = "RPAR_GT";
            bindings = <&kp RPAR>, <&kp GT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma_morph: comma_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_MORPH";
            bindings = <&kp COMMA>, <&comma_inner_morph>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma_inner_morph: comma_inner_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_INNER_MORPH";
            bindings = <&kp SEMICOLON>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        dot_morph: dot_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_MORPH";
            bindings = <&kp DOT>, <&dot_inner_morph>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_inner_morph: dot_inner_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_INNER_MORPH";
            bindings = <&kp COLON>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        excl_morph: excl_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "EXCL_MORPH";
            bindings = <&kp EXCL>, <&kp QMARK>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_esc {
            bindings = <&kp ESC>;
            key-positions = <2 3>;
            layers = <0 2 3>;
            timeout-ms = <20>;
            require-prior-idle-ms = <100>;
        };

        combo_ret {
            bindings = <&kp RET>;
            key-positions = <3 4>;
            layers = <0 2 3>;
            timeout-ms = <10>;
            require-prior-idle-ms = <100>;
        };

        combo_bspc {
            bindings = <&kp BACKSPACE>;
            key-positions = <7 8>;
            layers = <0 2 3>;
            timeout-ms = <20>;
            require-prior-idle-ms = <100>;
        };

        combo_del {
            bindings = <&kp DEL>;
            key-positions = <8 9>;
            layers = <0 2 3>;
            timeout-ms = <20>;
            require-prior-idle-ms = <50>;
        };

        combo_tab {
            bindings = <&hml LG(LCTRL) TAB>;
            key-positions = <13 14>;
            layers = <0 2 3>;
            timeout-ms = <10>;
            require-prior-idle-ms = <100>;
        };

        combo_repeat {
            bindings = <&hml_repeat LS(LGUI) 0>;
            key-positions = <15 16>;
            layers = <0 2 3>;
            timeout-ms = <10>;
            require-prior-idle-ms = <100>;
        };

        combo_lpar {
            bindings = <&hmr_lpar_lt LS(LGUI) 0>;
            key-positions = <19 20>;
            layers = <0 2 3>;
            timeout-ms = <20>;
        };

        combo_rpar {
            bindings = <&hmr_rpar_gt LG(LEFT_CONTROL) 0>;
            key-positions = <20 21>;
            layers = <0 2 3>;
            timeout-ms = <20>;
        };

        combo_copy {
            bindings = <&kp LG(C)>;
            key-positions = <26 27>;
            layers = <0 2 3>;
            timeout-ms = <20>;
        };

        combo_cut {
            bindings = <&kp LG(X)>;
            key-positions = <26 28>;
            layers = <0 2 3>;
            timeout-ms = <20>;
        };

        combo_paste {
            bindings = <&kp LG(V)>;
            key-positions = <27 28>;
            layers = <0 2 3>;
            timeout-ms = <20>;
        };

        combo_lbkt {
            bindings = <&kp LBKT>;
            key-positions = <31 32>;
            layers = <0 2 3>;
            timeout-ms = <20>;
        };

        combo_rbkt {
            bindings = <&kp RBKT>;
            key-positions = <32 33>;
            layers = <0 2 3>;
            timeout-ms = <20>;
        };

        combo_at {
            bindings = <&kp AT>;
            key-positions = <2 14>;
            layers = <0 2 3>;
            timeout-ms = <30>;
        };

        combo_hash {
            bindings = <&kp HASH>;
            key-positions = <3 15>;
            layers = <0 2 3>;
            timeout-ms = <30>;
        };

        combo_dllr {
            bindings = <&kp DLLR>;
            key-positions = <4 16>;
            layers = <0 2 3>;
            timeout-ms = <30>;
        };

        combo_prcnt {
            bindings = <&kp PRCNT>;
            key-positions = <5 17>;
            layers = <0 2 3>;
            timeout-ms = <30>;
        };

        combo_caret {
            bindings = <&kp CARET>;
            key-positions = <6 18>;
            layers = <0 2 3>;
            timeout-ms = <30>;
        };

        combo_plus {
            bindings = <&kp PLUS>;
            key-positions = <7 19>;
            layers = <0 2 3>;
            timeout-ms = <30>;
        };

        combo_star {
            bindings = <&kp STAR>;
            key-positions = <8 20>;
            layers = <0 2 3>;
            timeout-ms = <30>;
        };

        combo_amps {
            bindings = <&kp AMPS>;
            key-positions = <9 21>;
            layers = <0 2 3>;
            timeout-ms = <30>;
        };

        combo_grave {
            bindings = <&kp GRAVE>;
            key-positions = <14 26>;
            layers = <0 2 3>;
            timeout-ms = <30>;
        };

        combo_bslh {
            bindings = <&kp BSLH>;
            key-positions = <15 27>;
            layers = <0 2 3>;
            timeout-ms = <30>;
        };

        combo_equal {
            bindings = <&kp EQUAL>;
            key-positions = <16 28>;
            layers = <0 2 3>;
            timeout-ms = <30>;
        };

        combo_tilde {
            bindings = <&kp TILDE>;
            key-positions = <17 29>;
            layers = <0 2 3>;
            timeout-ms = <30>;
        };

        combo_under {
            bindings = <&kp UNDER>;
            key-positions = <18 30>;
            layers = <0 2 3>;
            timeout-ms = <30>;
        };

        combo_dash {
            bindings = <&kp MINUS>;
            key-positions = <19 31>;
            layers = <0 2 3>;
            timeout-ms = <30>;
        };

        combo_fslh {
            bindings = <&kp FSLH>;
            key-positions = <20 32>;
            layers = <0 2 3>;
            timeout-ms = <30>;
        };

        combo_pipe {
            bindings = <&kp PIPE>;
            key-positions = <21 33>;
            layers = <0 2 3>;
            timeout-ms = <30>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        def {
            bindings = <
&kp GRAVE  &kp Q        &kp W         &kp E        &kp R         &kp T          &kp Y         &kp U           &kp I         &kp O         &kp P          &kp BSPC
&kp ESC    &hml LALT A  &hml LCTRL S  &hml LGUI D  &hml LSHFT F  &kp G          &kp H         &hmr RSHFT J    &hmr LGUI K   &hmr LCTRL L  &hmr LALT SQT  &kp SEMICOLON
&trans     &kp Z        &kp X         &kp C        &kp V         &kp B          &kp N         &kp M           &comma_morph  &dot_morph    &excl_morph    &kp QMARK
                                      &lt 4 TAB    &lt 2 ENTER   &lt 1 SPACE    &smart_shift  &smart_num 3 3  &trans
            >;

            label = "Mac";
        };

        nav {
            bindings = <
&trans  &trans    &trans     &trans    &kp LG(TAB)  &trans    &kp LG(Z)     &kp LG(V)  &kp LG(C)  &kp LG(X)  &kp LG(LS(Z))  &trans
&trans  &sk LALT  &sk LCTRL  &sk LGUI  &sk LSHFT    &trans    &kp LEFT      &kp DOWN   &kp UP     &kp RIGHT  &kp RET        &trans
&trans  &trans    &trans     &trans    &trans       &trans    &kp HOME      &kp PG_DN  &kp PG_UP  &kp END    &kp INS        &trans
                             &trans    &trans       &trans    &kp K_CANCEL  &kp BSPC   &kp DEL
            >;

            label = "Magic";
        };

        fun {
            bindings = <
&trans  &kp F12  &kp F7  &kp F8  &kp F9  &kp PSCRN          &trans        &trans        &trans      &trans         &trans  &trans
&trans  &kp F11  &kp F4  &kp F5  &kp F6  &kp SLCK           &kp LC(LEFT)  &kp LC(DOWN)  &kp LC(UP)  &kp LC(RIGHT)  &trans  &trans
&trans  &kp F10  &kp F1  &kp F2  &kp F3  &kp PAUSE_BREAK    &trans        &trans        &trans      &trans         &trans  &trans
                         &trans  &trans  &trans             &trans        &trans        &trans
            >;

            label = "Function";
        };

        num {
            bindings = <
&kp GRAVE  &kp LBKT        &kp N7         &kp N8        &kp N9         &kp RBKT     &trans  &trans     &trans    &trans     &trans    &trans
&trans     &hml LALT SEMI  &hml LCTRL N4  &hml LGUI N5  &hml RSHFT N6  &kp EQUAL    &trans  &sk RSHFT  &sk LGUI  &sk LCTRL  &sk LALT  &trans
&trans     &kp MINUS       &kp N1         &kp N2        &kp N3         &kp SLASH    &trans  &trans     &trans    &trans     &trans    &trans
                                          &kp DOT       &kp N0         &trans       &trans  &trans     &trans
            >;

            label = "Number";
        };

        med {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans      &trans        &trans        &trans      &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans          &kp C_PREV  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_NEXT  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans          &trans      &trans        &trans        &trans      &trans  &trans
                                        &trans        &trans        &trans          &kp C_PP    &kp C_MUTE    &trans
            >;

            label = "Media";
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
